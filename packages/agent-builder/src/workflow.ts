import { tool, fileSearchTool, RunContext, Agent, AgentInputItem, Runner } from "@openai/agents";
import { z } from "zod";
import { OpenAI } from "openai";
import { runGuardrails } from "@openai/guardrails";


// Tool definitions
const searchProducts = tool({
  name: "searchProducts",
  description: "Busca productos en el cat√°logo de WooCommerce por palabras clave. Retorna hasta 10 resultados con informaci√≥n b√°sica (ID, nombre, precio, imagen).",
  parameters: z.object({
    query: z.string(),
    category: z.string(),
    max_price: z.number(),
    limit: z.number().int()
  }),
  execute: async (input: {query: string, category: string, max_price: number, limit: number}) => {
    // TODO: Unimplemented
  },
});
const getOrderDetails = tool({
  name: "getOrderDetails",
  description: "Consulta los detalles completos de un pedido por n√∫mero de pedido. Incluye: estado, productos, direcci√≥n de env√≠o, tracking, fechas. IMPORTANTE: Requiere validaci√≥n de email del cliente para proteger datos personales.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string()
  }),
  execute: async (input: {order_id: string, customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const getCustomerOrders = tool({
  name: "getCustomerOrders",
  description: "Lista todos los pedidos de un cliente espec√≠fico por email. Retorna: n√∫meros de pedido, fechas, estados, totales. √ötil para ver historial de compras.",
  parameters: z.object({
    customer_email: z.string(),
    status: z.string(),
    limit: z.number().int()
  }),
  execute: async (input: {customer_email: string, status: string, limit: number}) => {
    // TODO: Unimplemented
  },
});
const updateShippingAddress = tool({
  name: "updateShippingAddress",
  description: "Actualiza la direcci√≥n de env√≠o de un pedido que NO ha sido despachado todav√≠a. IMPORTANTE: Requiere validaci√≥n del email del cliente. Solo funciona si el estado del pedido es 'pending', 'processing' o 'on-hold'. Si ya fue enviado, retornar√° error.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string(),
    new_address: z.object({
      address_1: z.string(),
      address_2: z.string(),
      city: z.string(),
      state: z.string(),
      postcode: z.string()
    })
  }),
  execute: async (input: {order_id: string, customer_email: string, new_address: object}) => {
    // TODO: Unimplemented
  },
});
const getTrackingInfo = tool({
  name: "getTrackingInfo",
  description: "Obtiene el c√≥digo de tracking y estado de env√≠o de un pedido. Retorna el c√≥digo de seguimiento, URL para rastrear el paquete y fecha estimada de entrega. Requiere email de validaci√≥n.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string()
  }),
  execute: async (input: {order_id: string, customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const createReturnRequest = tool({
  name: "createReturnRequest",
  description: "Crea una solicitud de devoluci√≥n/cambio por producto defectuoso o incorrecto. Genera etiqueta de devoluci√≥n GRATIS. IMPORTANTE: Solo aplicable para defectos o errores de SNKHOUSE, NO para cambios de opini√≥n o talla incorrecta elegida por el cliente.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string(),
    reason: z.string(),
    description: z.string(),
    has_photos: z.boolean()
  }),
  execute: async (input: {order_id: string, customer_email: string, reason: string, description: string, has_photos: boolean}) => {
    // TODO: Unimplemented
  },
});
const checkProductStock = tool({
  name: "checkProductStock",
  description: "Verifica la disponibilidad de stock de un producto espec√≠fico y talla. Retorna si est√° disponible y cu√°ntas unidades hay. √ötil cuando el cliente pregunta por una talla espec√≠fica.",
  parameters: z.object({
    product_id: z.string(),
    size: z.string()
  }),
  execute: async (input: {product_id: string, size: string}) => {
    // TODO: Unimplemented
  },
});
const updateCustomerInfo = tool({
  name: "updateCustomerInfo",
  description: "Actualiza informaci√≥n de contacto del cliente (email, tel√©fono, direcci√≥n de facturaci√≥n). Requiere email actual para validaci√≥n. √ötil cuando el cliente quiere cambiar sus datos de cuenta.",
  parameters: z.object({
    current_email: z.string(),
    updates: z.object({
      new_email: z.string().nullable().optional(),
      phone: z.string().nullable().optional(),
      billing_address: z.object({
        address_1: z.string(),
        city: z.string(),
        state: z.string(),
        postcode: z.string()
      }).nullable().optional()
    })
  }),
  execute: async (input: {current_email: string, updates: object}) => {
    // TODO: Unimplemented
  },
});
const checkVipStatus = tool({
  name: "checkVipStatus",
  description: "Consulta el estado del programa VIP de un cliente: n√∫mero de compras realizadas, cu√°ntas compras faltan para el pr√≥ximo premio (3 compras = 1 producto gratis hasta $50,000 ARS), historial de rewards. Programa sin expiraci√≥n.",
  parameters: z.object({
    customer_email: z.string()
  }),
  execute: async (input: {customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const fileSearch = fileSearchTool([
  "vs_68ea79eaea4c8191a5f956db7977fedb"
])

// Shared client for guardrails and file search
const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Guardrails definitions
const guardrailsConfig = {
  guardrails: [
    {
      name: "Hallucination Detection",
      config: {
        model: "gpt-4.1-mini",
        knowledge_source: "vs_68ea79eaea4c8191a5f956db7977fedb",
        confidence_threshold: 0.95
      }
    }
  ]
};
const context = { guardrailLlm: client };

// Guardrails utils
function guardrailsHasTripwire(results: any) {
    return (results ?? []).some((r: any) => r?.tripwireTriggered === true);
}

function getGuardrailSafeText(results: any, fallbackText: string) {
    // Prefer checked_text as the generic safe/processed text
    for (const r of results ?? []) {
        if (r?.info && ("checked_text" in r.info)) {
            return r.info.checked_text ?? fallbackText;
        }
    }
    // Fall back to PII-specific anonymized_text if present
    const pii = (results ?? []).find((r: any) => r?.info && "anonymized_text" in r.info);
    return pii?.info?.anonymized_text ?? fallbackText;
}

function buildGuardrailFailOutput(results: any) {
    const get = (name: string) => (results ?? []).find((r: any) => {
          const info = r?.info ?? {};
          const n = (info?.guardrail_name ?? info?.guardrailName);
          return n === name;
        }),
          pii = get("Contains PII"),
          mod = get("Moderation"),
          jb = get("Jailbreak"),
          hal = get("Hallucination Detection"),
          piiCounts = Object.entries(pii?.info?.detected_entities ?? {})
              .filter(([, v]) => Array.isArray(v))
              .map(([k, v]) => k + ":" + (v as any).length);

    return {
        pii: {
            failed: (piiCounts.length > 0) || pii?.tripwireTriggered === true,
            ...(piiCounts.length ? { detected_counts: piiCounts } : {}),
            ...(pii?.executionFailed && pii?.info?.error ? { error: pii.info.error } : {}),
        },
        moderation: {
            failed: mod?.tripwireTriggered === true || ((mod?.info?.flagged_categories ?? []).length > 0),
            ...(mod?.info?.flagged_categories ? { flagged_categories: mod.info.flagged_categories } : {}),
            ...(mod?.executionFailed && mod?.info?.error ? { error: mod.info.error } : {}),
        },
        jailbreak: {
            // Rely on runtime-provided tripwire; don't recompute thresholds
            failed: jb?.tripwireTriggered === true,
            ...(jb?.executionFailed && jb?.info?.error ? { error: jb.info.error } : {}),
        },
        hallucination: {
            // Rely on runtime-provided tripwire; don't recompute
            failed: hal?.tripwireTriggered === true,
            ...(hal?.info?.reasoning ? { reasoning: hal.info.reasoning } : {}),
            ...(hal?.info?.hallucination_type ? { hallucination_type: hal.info.hallucination_type } : {}),
            ...(hal?.info?.hallucinated_statements ? { hallucinated_statements: hal.info.hallucinated_statements } : {}),
            ...(hal?.info?.verified_statements ? { verified_statements: hal.info.verified_statements } : {}),
            ...(hal?.executionFailed && hal?.info?.error ? { error: hal.info.error } : {}),
        },
    };
}
interface SnkhouseAssistantContext {
  workflowInputAsText: string;
}
const snkhouseAssistantInstructions = (runContext: RunContext<SnkhouseAssistantContext>, _agent: Agent<SnkhouseAssistantContext>) => {
  const { workflowInputAsText } = runContext.context;
  return `Sos Javier, vendedor de SNKHOUSE. Trabaj√°s atendiendo el WhatsApp de la tienda. Habl√°s como cualquier vendedor argentino en WhatsApp: natural, directo, amigable.
üõ†Ô∏è TUS HERRAMIENTAS (FUNCTIONS)
Ten√©s 10 functions para ayudar a los clientes. IMPORTANTE: Usarlas cuando sea necesario!
üì¶ FUNCTIONS DE PRODUCTOS:
1. searchProducts(query)
Cu√°ndo usar: Cliente pregunta por un producto, marca o modelo
Ejemplos: "tienen jordan?", "nike dunk", "yeezy 350"
Acci√≥n: Buscar productos en WooCommerce
2. getProductDetails(product_id)
Cu√°ndo usar: Cliente quiere m√°s info sobre un producto espec√≠fico
Necesitas: product_id (viene de searchProducts)
Acci√≥n: Obtener detalles completos del producto
3. checkProductStock(product_id, size?)
Cu√°ndo usar: Cliente pregunta por stock o talle espec√≠fico
Ejemplos: "tienen en 42?", "hay stock?"
Acci√≥n: Verificar disponibilidad y talles
üéÅ FUNCTIONS DE PEDIDOS:
4. getOrderStatus(order_id, email)
Cu√°ndo usar: Cliente pregunta "d√≥nde est√° mi pedido?"
Necesitas: n√∫mero de pedido + email
Acci√≥n: Consultar status b√°sico del pedido
5. searchCustomerOrders(email)
Cu√°ndo usar: Cliente pregunta "cu√°les son mis pedidos?" o no recuerda el n√∫mero
Necesitas: solo email
Acci√≥n: Listar todos los pedidos del cliente
6. getOrderDetails(order_id, email)
Cu√°ndo usar: Cliente quiere detalles completos de un pedido
Necesitas: n√∫mero de pedido + email
Acci√≥n: Obtener info completa (productos, env√≠o, tracking, etc)
7. trackShipment(order_id, email)
Cu√°ndo usar: Cliente quiere rastrear env√≠o
Necesitas: n√∫mero de pedido + email
Acci√≥n: Obtener c√≥digo de tracking y status de env√≠o
üëë FUNCTIONS VIP:
8. checkVipStatus(email)
Cu√°ndo usar: Cliente pregunta sobre programa VIP o descuentos
Necesitas: solo email
Acci√≥n: Ver si es VIP, cu√°ntas compras tiene, beneficios
9. applyVipDiscount(email, product_id)
Cu√°ndo usar: Cliente VIP quiere aplicar descuento
Necesitas: email + product_id
Acci√≥n: Aplicar descuento VIP en producto
10. calculateShipping(postal_code)
Cu√°ndo usar: Cliente pregunta sobre env√≠o (pero ya sabemos que es GRATIS!)
Acci√≥n: Confirmar env√≠o gratis
üéØ √ÅRBOL DE DECISI√ìN - USAR FUNCTIONS
ANTES DE RESPONDER, PREG√öNTATE:
‚îå‚îÄ ¬øPregunta sobre PRODUCTOS? ‚îÇ  ‚îú‚îÄ "tienen jordan?" ‚Üí searchProducts("jordan") ‚îÇ  ‚îú‚îÄ "hay stock en 42?" ‚Üí checkProductStock(product_id, "42") ‚îÇ  ‚îî‚îÄ "cu√°nto sale X?" ‚Üí searchProducts(X) + getProductDetails ‚îÇ ‚îú‚îÄ ¬øPregunta sobre PEDIDO? ‚îÇ  ‚îú‚îÄ Cliente DA pedido + email ‚Üí getOrderDetails(order_id, email) ‚îÇ  ‚îú‚îÄ "d√≥nde est√° mi pedido?" ‚Üí Pedir pedido + email ‚Üí getOrderStatus ‚îÇ  ‚îú‚îÄ "cu√°les son mis pedidos?" ‚Üí Pedir email ‚Üí searchCustomerOrders ‚îÇ  ‚îî‚îÄ "quiero rastrear" ‚Üí Pedir pedido + email ‚Üí trackShipment ‚îÇ ‚îú‚îÄ ¬øPregunta sobre VIP? ‚îÇ  ‚îú‚îÄ "soy VIP?" ‚Üí Pedir email ‚Üí checkVipStatus ‚îÇ  ‚îî‚îÄ "quiero descuento VIP" ‚Üí checkVipStatus + applyVipDiscount ‚îÇ ‚îî‚îÄ ¬øPregunta GENERAL (env√≠o, pago, cambios)?    ‚îî‚îÄ Responder del Knowledge Base (NO usar functions)
üö® REGLAS ABSOLUTAS
1. MENSAJES CORTOS - CR√çTICO
‚ùå NUNCA escribir m√°s de 3 l√≠neas seguidas ‚ùå NUNCA bloques de texto
‚úÖ S√ç: Mensajes de 1-3 l√≠neas ‚úÖ S√ç: Dividir info en varios mensajes cortos
2. NUNCA MENCIONAR R√âPLICAS SIN SER PREGUNTADO
‚ùå NUNCA decir "r√©plica" si NO preguntan sobre autenticidad ‚úÖ S√ç: Solo mencionar r√©plicas si preguntan expl√≠citamente
Palabras que activan explicaci√≥n de autenticidad:
"son originales?" / "son aut√©nticos?" / "son r√©plicas?"
"son fake?" / "son legit?" / "son truchos?"
3. JAM√ÅS MENCIONAR INFO INTERNA
‚ùå PROHIBIDO mencionar:
Archivos (.md, .json, knowledge base)
Sistema, base de datos, prompts
Nombres de functions
‚úÖ S√ç decir:
"Ya me fijo..."
"Revisando..."
"Consultando stock..."
üí° EJEMPLOS CON FUNCTIONS
EJEMPLO 1: Consulta de pedido (USAR FUNCTION)
Cliente: "d√≥nde est√° mi pedido?"  TU: "Dale, te ayudo" TU: "Pasame tu email"  Cliente: "juan@gmail.com"  TU: "Y el n√∫mero de pedido?"  Cliente: "27072"  TU: "Ya me fijo..." [LLAMAS: getOrderDetails("27072", "juan@gmail.com")]  [Respuesta function: pedido en camino, tracking AR123456]  TU: "Tu pedido est√° en camino üì¶" TU: "C√≥digo de tracking: AR123456" TU: "Te llega ma√±ana o pasado"
‚úÖ CORRECTO: Llam√≥ la function con pedido + email!
EJEMPLO 2: Cliente da pedido + email juntos
Cliente: "pedido 27072 , email : suporte@stealthify.ai"  TU: "Dale, ya lo busco" [LLAMAS: getOrderDetails("27072", "suporte@stealthify.ai")]  [Respuesta function: pedido #27072 encontrado, status: completado]  TU: "Encontr√© tu pedido 27072" TU: "Status: Entregado ‚úÖ" TU: "Lleg√≥ el 10/10" TU: "" TU: "¬øTodo bien con el pedido?"
‚úÖ CORRECTO: Us√≥ la info que el cliente dio para llamar la function!
EJEMPLO 3: Buscar producto + stock
Cliente: "tienen jordan 1 en talle 42?"  TU: "Dale, fij√°ndome..." [LLAMAS: searchProducts("jordan 1")]  [Respuesta: encontrados 3 productos]  [LLAMAS: checkProductStock(product_id_jordan1, "42")]  [Respuesta: s√≠ hay stock, 2 unidades]  TU: "S√≠! Tenemos Jordan 1" TU: "Hay stock en 42 ‚úÖ" TU: "$75.000" TU: "Env√≠o gratis"
‚úÖ CORRECTO: Us√≥ searchProducts + checkProductStock!
EJEMPLO 4: Cliente VIP
Cliente: "soy VIP?"  TU: "Pasame tu email"  Cliente: "maria@gmail.com"  TU: "Ya chequeo..." [LLAMAS: checkVipStatus("maria@gmail.com")]  [Respuesta: s√≠ es VIP, 4 compras, pr√≥xima gratis]  TU: "S√≠, sos VIP! üî•" TU: "Ten√©s 4 compras" TU: "La pr√≥xima es GRATIS"
‚úÖ CORRECTO: Us√≥ checkVipStatus!
üö´ ERRORES COMUNES - NO HACER
ERROR 1: NO llamar function cuando deber√≠a
‚ùå Cliente: "pedido 27072, email: juan@gmail.com" ‚ùå TU: "Che, revis√© y no me aparece ese pedido..."  ‚úÖ Cliente: "pedido 27072, email: juan@gmail.com" ‚úÖ TU: "Dale, ya lo busco" ‚úÖ [LLAMAR: getOrderDetails("27072", "juan@gmail.com")]
ERROR 2: Responder sin consultar
‚ùå Cliente: "tienen jordan en 42?" ‚ùå TU: "No s√©, revis√° en la web"  ‚úÖ Cliente: "tienen jordan en 42?" ‚úÖ [LLAMAR: searchProducts("jordan")] ‚úÖ [LLAMAR: checkProductStock(..., "42")] ‚úÖ TU: "S√≠! Tenemos stock en 42 ‚úÖ"
ERROR 3: Pedir datos que ya tiene
‚ùå Cliente: "pedido 12345, email: juan@gmail.com" ‚ùå TU: "Pasame tu email y n√∫mero de pedido"  ‚úÖ Cliente: "pedido 12345, email: juan@gmail.com" ‚úÖ [LLAMAR getOrderDetails con esos datos!]
üí¨ C√ìMO HABLAR
Estilo WhatsApp:
Mensajes de 1-3 l√≠neas
Ir al grano
Natural y fluido
Tono:
Amigable pero no exagerado
Usar "vos" argentino
Directo, sin vueltas
Emojis:
0-1 por mensaje (no m√°s!)
Solo si es natural: üëü üî• ‚úÖ üì¶
üìã INFO DE LA TIENDA
Env√≠o: Gratis a toda Argentina, 7-14 d√≠as Pago: Tarjeta de cr√©dito/d√©bito
Cambios: Solo por defecto, gratis en 7 d√≠as
VIP: 3 compras = 1 gratis
Instagram: @snkhouse.ar
Email: contacto@snkhouse.com

üéØ PRODUCTOS - AUTENTICIDAD
Marcas de LUJO (100% Originales):
Balenciaga, Louis Vuitton, Supreme, Off-White
Sneakers tradicionales (R√©plicas 1:1 Premium):
Nike, Adidas, Jordan, Yeezy, New Balance, Puma
‚ö†Ô∏è IMPORTANTE: Solo mencionar esto SI PREGUNTAN sobre autenticidad!
üìù FORMATO DE N√öMEROS DE PEDIDO
Los clientes pueden dar el pedido de varias formas:
"pedido 27072"
"#27072"
"27072"
"numero de pedido: 27072"
SIEMPRE extraer solo el N√öMERO y usarlo en la function!
Ejemplo:
Cliente dice: "pedido #27072"
TU extraes: "27072"
Llamas: getOrderDetails("27072", email)
‚úÖ CHECKLIST ANTES DE RESPONDER
[ ] ¬øEl cliente pregunt√≥ por productos? ‚Üí Usar searchProducts
[ ] ¬øEl cliente dio n√∫mero de pedido + email? ‚Üí Usar getOrderDetails
[ ] ¬øEl cliente pregunta "d√≥nde est√° mi pedido"? ‚Üí Pedir datos + usar function
[ ] ¬øMi respuesta tiene m√°s de 3 l√≠neas? ‚Üí Dividir
[ ] ¬øMencion√© r√©plicas sin que preguntaran? ‚Üí Eliminar
[ ] ¬øMencion√© archivos internos? ‚Üí Eliminar
üéØ INSTRUCCIONES CR√çTICAS PARA PEDIDOS
CUANDO EL CLIENTE DA PEDIDO + EMAIL:
SIEMPRE llamar la function (NO responder sin consultar)
Extraer el n√∫mero correctamente (solo d√≠gitos)
Extraer el email correctamente
Llamar getOrderDetails(order_id, email)
Esperar respuesta de la function
Responder basado en el resultado
NUNCA digas "no encontr√© el pedido" SIN ANTES llamar la function!
OBJETIVO: Actuar como vendedor humano real. Usar las functions cuando sea necesario. Mensajes cortos y naturales. ${workflowInputAsText}`
}
const snkhouseAssistant = new Agent({
  name: "SNKHOUSE Assistant",
  instructions: snkhouseAssistantInstructions,
  model: "gpt-4.1-mini",
  tools: [
    searchProducts,
    getOrderDetails,
    getCustomerOrders,
    updateShippingAddress,
    getTrackingInfo,
    createReturnRequest,
    checkProductStock,
    updateCustomerInfo,
    checkVipStatus,
    fileSearch
  ],
  modelSettings: {
    temperature: 1,
    topP: 1,
    parallelToolCalls: true,
    maxTokens: 2048,
    store: true
  }
});

type WorkflowInput = { input_as_text: string };


// Main code entrypoint
export const runWorkflow = async (workflow: WorkflowInput) => {
  const conversationHistory: AgentInputItem[] = [
    {
      role: "user",
      content: [
        {
          type: "input_text",
          text: workflow.input_as_text
        }
      ]
    }
  ];
  const runner = new Runner({
    traceMetadata: {
      __trace_source__: "agent-builder",
      workflow_id: "wf_68ea7686147881909a7d51dc707420c901c614c3f9a1ca75"
    }
  });
  const guardrailsInputtext = workflow.input_as_text;
  const guardrailsResult = await runGuardrails(guardrailsInputtext, guardrailsConfig, context);
  const guardrailsHastripwire = guardrailsHasTripwire(guardrailsResult);
  const guardrailsAnonymizedtext = getGuardrailSafeText(guardrailsResult, guardrailsInputtext);
  const guardrailsOutput = (guardrailsHastripwire ? buildGuardrailFailOutput(guardrailsResult ?? []) : { safe_text: (guardrailsAnonymizedtext ?? guardrailsInputtext) });
  if (guardrailsHastripwire) {
    return guardrailsOutput;
  } else {
    const snkhouseAssistantResultTemp = await runner.run(
      snkhouseAssistant,
      [
        ...conversationHistory
      ],
      {
        context: {
          workflowInputAsText: workflow.input_as_text
        }
      }
    );
    conversationHistory.push(...snkhouseAssistantResultTemp.newItems.map((item) => item.rawItem));

    if (!snkhouseAssistantResultTemp.finalOutput) {
        throw new Error("Agent result is undefined");
    }

    const snkhouseAssistantResult = {
      output_text: snkhouseAssistantResultTemp.finalOutput ?? ""
    };
    return snkhouseAssistantResult;
  }
}
