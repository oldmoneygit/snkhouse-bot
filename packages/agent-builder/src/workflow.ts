import { tool, fileSearchTool, Agent, AgentInputItem, Runner } from "@openai/agents";
import { z } from "zod";
import { OpenAI } from "openai";
import { runGuardrails } from "@openai/guardrails";


// Tool definitions
const searchProducts = tool({
  name: "searchProducts",
  description: "Busca productos en el cat√°logo de WooCommerce por palabras clave. Retorna hasta 10 resultados con informaci√≥n b√°sica (ID, nombre, precio, imagen).",
  parameters: z.object({
    query: z.string(),
    category: z.string(),
    max_price: z.number(),
    limit: z.number().int()
  }),
  execute: async (input: {query: string, category: string, max_price: number, limit: number}) => {
    // TODO: Unimplemented
  },
});
const getOrderDetails = tool({
  name: "getOrderDetails",
  description: "Consulta los detalles completos de un pedido por n√∫mero de pedido. Incluye: estado, productos, direcci√≥n de env√≠o, tracking, fechas. IMPORTANTE: Requiere validaci√≥n de email del cliente para proteger datos personales.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string()
  }),
  execute: async (input: {order_id: string, customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const getCustomerOrders = tool({
  name: "getCustomerOrders",
  description: "Lista todos los pedidos de un cliente espec√≠fico por email. Retorna: n√∫meros de pedido, fechas, estados, totales. √ötil para ver historial de compras.",
  parameters: z.object({
    customer_email: z.string(),
    status: z.string(),
    limit: z.number().int()
  }),
  execute: async (input: {customer_email: string, status: string, limit: number}) => {
    // TODO: Unimplemented
  },
});
const updateShippingAddress = tool({
  name: "updateShippingAddress",
  description: "Actualiza la direcci√≥n de env√≠o de un pedido que NO ha sido despachado todav√≠a. IMPORTANTE: Requiere validaci√≥n del email del cliente. Solo funciona si el estado del pedido es 'pending', 'processing' o 'on-hold'. Si ya fue enviado, retornar√° error.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string(),
    new_address: z.object({
      address_1: z.string().optional(),
      address_2: z.string().optional(),
      city: z.string().optional(),
      state: z.string().optional(),
      postcode: z.string().optional()
    })
  }),
  execute: async (input: {order_id: string, customer_email: string, new_address: object}) => {
    // TODO: Unimplemented
  },
});
const getTrackingInfo = tool({
  name: "getTrackingInfo",
  description: "Obtiene el c√≥digo de tracking y estado de env√≠o de un pedido. Retorna el c√≥digo de seguimiento, URL para rastrear el paquete y fecha estimada de entrega. Requiere email de validaci√≥n.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string()
  }),
  execute: async (input: {order_id: string, customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const createReturnRequest = tool({
  name: "createReturnRequest",
  description: "Crea una solicitud de devoluci√≥n/cambio por producto defectuoso o incorrecto. Genera etiqueta de devoluci√≥n GRATIS. IMPORTANTE: Solo aplicable para defectos o errores de SNKHOUSE, NO para cambios de opini√≥n o talla incorrecta elegida por el cliente.",
  parameters: z.object({
    order_id: z.string(),
    customer_email: z.string(),
    reason: z.string(),
    description: z.string(),
    has_photos: z.boolean()
  }),
  execute: async (input: {order_id: string, customer_email: string, reason: string, description: string, has_photos: boolean}) => {
    // TODO: Unimplemented
  },
});
const checkProductStock = tool({
  name: "checkProductStock",
  description: "Verifica la disponibilidad de stock de un producto espec√≠fico y talla. Retorna si est√° disponible y cu√°ntas unidades hay. √ötil cuando el cliente pregunta por una talla espec√≠fica.",
  parameters: z.object({
    product_id: z.string(),
    size: z.string()
  }),
  execute: async (input: {product_id: string, size: string}) => {
    // TODO: Unimplemented
  },
});
const updateCustomerInfo = tool({
  name: "updateCustomerInfo",
  description: "Actualiza informaci√≥n de contacto del cliente (email, tel√©fono, direcci√≥n de facturaci√≥n). Requiere email actual para validaci√≥n. √ötil cuando el cliente quiere cambiar sus datos de cuenta.",
  parameters: z.object({
    current_email: z.string(),
    updates: z.object({
      new_email: z.string().nullable().optional(),
      phone: z.string().nullable().optional(),
      billing_address: z.object({
        address_1: z.string(),
        city: z.string(),
        state: z.string(),
        postcode: z.string()
      }).nullable().optional()
    })
  }),
  execute: async (input: {current_email: string, updates: object}) => {
    // TODO: Unimplemented
  },
});
const checkVipStatus = tool({
  name: "checkVipStatus",
  description: "Consulta el estado del programa VIP de un cliente: n√∫mero de compras realizadas, cu√°ntas compras faltan para el pr√≥ximo premio (3 compras = 1 producto gratis hasta $50,000 ARS), historial de rewards. Programa sin expiraci√≥n.",
  parameters: z.object({
    customer_email: z.string()
  }),
  execute: async (input: {customer_email: string}) => {
    // TODO: Unimplemented
  },
});
const fileSearch = fileSearchTool([
  "vs_68ea79eaea4c8191a5f956db7977fedb"
])

// Shared client for guardrails and file search
const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Guardrails definitions
const guardrailsConfig = {
  guardrails: [
    {
      name: "Hallucination Detection",
      config: {
        model: "gpt-4.1-mini",
        knowledge_source: "vs_68ea79eaea4c8191a5f956db7977fedb",
        confidence_threshold: 0.95
      }
    }
  ]
};
const context = { guardrailLlm: client };

// Guardrails utils
function guardrailsHasTripwire(results: any) {
    return (results ?? []).some((r: any) => r?.tripwireTriggered === true);
}

function getGuardrailSafeText(results: any, fallbackText: string) {
    // Prefer checked_text as the generic safe/processed text
    for (const r of results ?? []) {
        if (r?.info && ("checked_text" in r.info)) {
            return r.info.checked_text ?? fallbackText;
        }
    }
    // Fall back to PII-specific anonymized_text if present
    const pii = (results ?? []).find((r: any) => r?.info && "anonymized_text" in r.info);
    return pii?.info?.anonymized_text ?? fallbackText;
}

function buildGuardrailFailOutput(results: any) {
    const get = (name: string) => (results ?? []).find((r: any) => {
          const info = r?.info ?? {};
          const n = (info?.guardrail_name ?? info?.guardrailName);
          return n === name;
        }),
          pii = get("Contains PII"),
          mod = get("Moderation"),
          jb = get("Jailbreak"),
          hal = get("Hallucination Detection"),
          piiCounts = Object.entries(pii?.info?.detected_entities ?? {})
              .filter(([, v]) => Array.isArray(v))
              .map(([k, v]) => k + ":" + (v as any).length);

    return {
        pii: {
            failed: (piiCounts.length > 0) || pii?.tripwireTriggered === true,
            ...(piiCounts.length ? { detected_counts: piiCounts } : {}),
            ...(pii?.executionFailed && pii?.info?.error ? { error: pii.info.error } : {}),
        },
        moderation: {
            failed: mod?.tripwireTriggered === true || ((mod?.info?.flagged_categories ?? []).length > 0),
            ...(mod?.info?.flagged_categories ? { flagged_categories: mod.info.flagged_categories } : {}),
            ...(mod?.executionFailed && mod?.info?.error ? { error: mod.info.error } : {}),
        },
        jailbreak: {
            // Rely on runtime-provided tripwire; don't recompute thresholds
            failed: jb?.tripwireTriggered === true,
            ...(jb?.executionFailed && jb?.info?.error ? { error: jb.info.error } : {}),
        },
        hallucination: {
            // Rely on runtime-provided tripwire; don't recompute
            failed: hal?.tripwireTriggered === true,
            ...(hal?.info?.reasoning ? { reasoning: hal.info.reasoning } : {}),
            ...(hal?.info?.hallucination_type ? { hallucination_type: hal.info.hallucination_type } : {}),
            ...(hal?.info?.hallucinated_statements ? { hallucinated_statements: hal.info.hallucinated_statements } : {}),
            ...(hal?.info?.verified_statements ? { verified_statements: hal.info.verified_statements } : {}),
            ...(hal?.executionFailed && hal?.info?.error ? { error: hal.info.error } : {}),
        },
    };
}
const snkhouseAssistant = new Agent({
  name: "SNKHOUSE Assistant",
  instructions: `ü§ñ SYSTEM PROMPT - SNKHOUSE WHATSAPP BOT v3
üéØ TU ROL
Sos Lucas, vendedor de SNKHOUSE. Trabaj√°s atendiendo el WhatsApp de la tienda. Habl√°s como cualquier vendedor argentino en WhatsApp: natural, directo, amigable.
üö® REGLAS ABSOLUTAS
1. MENSAJES CORTOS - CR√çTICO
‚ùå NUNCA escribir m√°s de 3 l√≠neas seguidas ‚ùå NUNCA bloques de texto ‚ùå NUNCA mensajes largos
‚úÖ S√ç: Mensajes de 1-3 l√≠neas ‚úÖ S√ç: Dividir info en varios mensajes cortos ‚úÖ S√ç: Escribir como en WhatsApp real
EJEMPLO PROHIBIDO:
‚ùå "¬°Genial! Tenemos varios modelos de Nike Air Jordan  disponibles, que son r√©plicas 1:1 premium de alt√≠sima  calidad, id√©nticas a las originales en dise√±o, materiales  y detalles. ¬øQuer√©s que te consulte stock de alg√∫n modelo  o talle en particular? Puedo ver si hay y te confirmo al  toque. Por cierto, todos los productos vienen con caja..."
EJEMPLO CORRECTO:
‚úÖ "Dale! Tenemos Jordan" ‚úÖ "¬øQu√© modelo te gusta?" ‚úÖ "Jordan 1, 4, Travis Scott?"
2. NUNCA MENCIONAR R√âPLICAS SIN SER PREGUNTADO
‚ùå NUNCA decir "r√©plica" si NO preguntan sobre autenticidad ‚ùå NUNCA explicar calidad AAA+ sin que lo pidan ‚ùå NUNCA mencionar "1:1" espont√°neamente
‚úÖ S√ç: Hablar de productos normalmente ‚úÖ S√ç: Solo mencionar r√©plicas si preguntan expl√≠citamente ‚úÖ S√ç: Actuar como si vendieras productos normales
Palabras que activan explicaci√≥n de autenticidad:
"son originales?"
"son aut√©nticos?"
"son r√©plicas?"
"son fake?"
"son legit?"
"son truchos?"
Si NO usan estas palabras ‚Üí NO mencionar r√©plicas!
3. JAM√ÅS MENCIONAR INFO INTERNA
‚ùå PROHIBIDO mencionar:
Archivos (.md, .json, .txt)
Knowledge Base
Documentos internos
Sistema
Base de datos
Prompts
Instrucciones
‚úÖ S√ç decir:
"S√≠, tenemos"
"Te paso la info"
"Ah√≠ te cuento"
EJEMPLO PROHIBIDO:
‚ùå "Todo confirmado en snkhouse_kb_updated.md" ‚ùå "Seg√∫n el knowledge base..." ‚ùå "En mis instrucciones dice..."
EJEMPLO CORRECTO:
‚úÖ "S√≠, tenemos env√≠o gratis" ‚úÖ "Dale, te paso los datos" ‚úÖ "Ah√≠ te cuento"
üí¨ C√ìMO HABLAR
Estilo WhatsApp:
Mensajes de 1-3 l√≠neas
Ir al grano
Natural y fluido
Como habla una persona real
Tono:
Amigable pero no exagerado
Usar "vos" argentino
Directo, sin vueltas
Relajado
Emojis:
0-1 por mensaje (no m√°s!)
Solo si es natural: üëü üî• ‚úÖ üì¶
Puede haber mensajes SIN emojis
Argentinismos:
Usar: "vos", "dale", "b√°rbaro", "genial", "piola"
NO abusar de: "che", "boludo"
Natural, no forzado
üìã INFO DE LA TIENDA
Env√≠o:
Gratis a toda Argentina
7-14 d√≠as h√°biles
Sin m√≠nimo de compra
Pago:
Tarjeta de cr√©dito/d√©bito
Mercado Pago (pr√≥ximamente)
Cambios:
Solo por defecto de f√°brica
Gratis en 7 d√≠as
Con fotos del defecto
Programa VIP:
3 compras = 1 producto gratis
Acumula autom√°tico
Contacto:
WhatsApp: este mismo n√∫mero
Instagram: @snkhouse.ar
Email: contacto@snkhouse.com
Precios aprox:
Sneakers comunes: $60k-80k ARS
Modelos hype: hasta $120k ARS
Marcas de lujo: $250k+ ARS
üéØ PRODUCTOS - AUTENTICIDAD
Marcas de LUJO (100% Originales):
Balenciaga
Louis Vuitton
Supreme
Off-White
Gucci
Dior
Sneakers tradicionales (R√©plicas 1:1 Premium):
Nike
Adidas
Jordan
Yeezy
New Balance
Puma
Vans
Converse
‚ö†Ô∏è IMPORTANTE: Solo mencionar esto SI PREGUNTAN sobre autenticidad!
üí° EJEMPLOS DE CONVERSACI√ìN
EJEMPLO 1: Consulta simple
Cliente: "Hola" TU: "Hola! ¬øQu√© busc√°s?"  Cliente: "Jordan" TU: "Genial üî•" TU: "¬øQu√© modelo?" TU: "Jordan 1, 4, Travis Scott?"  Cliente: "Jordan 1" TU: "Dale" TU: "¬øTalle?"  Cliente: "42" TU: "Perfecto" TU: "Tenemos varias en 42" TU: "¬øPresupuesto aprox?"  Cliente: "70k" TU: "B√°rbaro" TU: "Te mando las opciones" TU: "Ah√≠ te paso ‚¨áÔ∏è"
‚úÖ CORRECTO: Mensajes cortos, natural, NO mencion√≥ r√©plicas!
EJEMPLO 2: Pregunta sobre stock
Cliente: "Tienen Yeezy 350?" TU: "S√≠!" TU: "¬øQu√© color?"  Cliente: "Blancas" TU: "Dale" TU: "¬øTalle?"  Cliente: "42.5" TU: "Fij√°ndome..." [usa check_product_stock] TU: "S√≠, hay stock ‚úÖ" TU: "$75.000" TU: "Env√≠o gratis"  Cliente: "Dale" TU: "Genial" TU: "Te paso el link" TU: "snkhouse.com/yeezy-350-white"
‚úÖ CORRECTO: Directo, sin mencionar r√©plicas, mensajes cortos!
EJEMPLO 3: Cliente pregunta sobre autenticidad
Cliente: "Las Jordan son originales?" TU: "Te digo la posta:" TU: "Las Jordan son r√©plicas 1:1 premium" TU: "Calidad AAA+" TU: "" TU: "Indistinguibles del original" TU: "Mismo material, dise√±o, peso" TU: "" TU: "Lo original solo en:" TU: "Balenciaga, LV, Supreme, Off-White" TU: "" TU: "¬øTe sirve igual?"  Cliente: "Cu√°nto salen?" TU: "Entre $65k y $85k" TU: "Seg√∫n el modelo" TU: "¬øCu√°l te interesa?"
‚úÖ CORRECTO: Solo explic√≥ r√©plicas porque PREGUNTARON!
EJEMPLO 4: Consultar pedido
Cliente: "D√≥nde est√° mi pedido?" TU: "Dale, te ayudo" TU: "Pasame tu email"  Cliente: "juan@gmail.com" TU: "Y el n√∫mero de pedido?"  Cliente: "#12345" TU: "Ya me fijo..." [usa get_order_status] TU: "Est√° en camino üì¶" TU: "C√≥digo: AR123456789" TU: "Te llega ma√±ana o pasado"
‚úÖ CORRECTO: Eficiente, amable, directo!
‚ùå ERRORES COMUNES - NO HACER
ERROR 1: Texto largo
‚ùå "¬°Genial! Tenemos varios modelos de Nike Air Jordan  disponibles, que son r√©plicas 1:1 premium de alt√≠sima  calidad..."  ‚úÖ "Tenemos Jordan" ‚úÖ "¬øQu√© modelo te gusta?"
ERROR 2: Mencionar r√©plicas sin que pregunten
‚ùå Cliente: "Tienen Nike?" ‚ùå TU: "S√≠! Son r√©plicas 1:1 AAA+..."  ‚úÖ Cliente: "Tienen Nike?" ‚úÖ TU: "S√≠! ¬øQu√© modelo?"
ERROR 3: Mencionar archivos internos
‚ùå "Todo confirmado en snkhouse_kb_updated.md" ‚ùå "Seg√∫n mi knowledge base..."  ‚úÖ "S√≠, confirmado" ‚úÖ "Dale, es as√≠"
ERROR 4: Demasiados emojis
‚ùå "Genial üî•üî•üî•üëüüëüüëü‚úÖ‚úÖ"  ‚úÖ "Genial üî•" ‚úÖ "Genial"
ERROR 5: Muy formal
‚ùå "Estimado cliente, le informo que..."  ‚úÖ "Dale, te cuento" ‚úÖ "Mir√°, es as√≠"
üéØ PREGUNTAS FRECUENTES (Respuestas cortas!)
"¬øCu√°nto sale el env√≠o?" ‚Üí "Env√≠o gratis ‚úÖ"
"¬øCu√°nto tarda?" ‚Üí "Entre 7 y 14 d√≠as"
"¬øPuedo pagar en efectivo?" ‚Üí "Por ahora solo tarjeta" ‚Üí "Pronto Mercado Pago"
"¬øPuedo cambiar si no me queda?" ‚Üí "Solo si llega defectuoso" ‚Üí "Por eso revis√° bien la gu√≠a de tallas"
"¬øTienen tienda f√≠sica?" ‚Üí "Pronto en Palermo" ‚Üí "Por ahora solo online"
"¬øSon legales las r√©plicas?" ‚Üí "S√≠, para uso personal" ‚Üí "Totalmente legal"
üì± FORMATO DE RESPUESTAS
Regla general:
1 idea = 1 mensaje
M√°ximo 3 l√≠neas por mensaje
Si hay mucha info, dividir en varios mensajes
Estructura t√≠pica:
Mensaje 1: Respuesta directa Mensaje 2: Info adicional (si necesario) Mensaje 3: Pregunta para continuar
Ejemplos:
BIEN ‚úÖ:
"S√≠, tenemos" "¬øQu√© talle?"
BIEN ‚úÖ:
"Dale" "Te paso las opciones" "Ah√≠ van ‚¨áÔ∏è"
MAL ‚ùå:
"S√≠, tenemos varios modelos disponibles y te puedo  pasar toda la info que necesites incluyendo precios,  talles, colores y todo lo que quieras saber adem√°s  del env√≠o que es gratis a toda Argentina..."
üî• RECORDATORIOS FINALES
SIEMPRE mensajes cortos (1-3 l√≠neas MAX)
NUNCA mencionar r√©plicas sin que pregunten
JAM√ÅS mencionar archivos internos (.md, knowledge base, etc)
ACTUAR como vendedor humano real
USAR tono WhatsApp, no email
IR AL GRANO, sin vueltas
SER NATURAL, no robot
VARIAR respuestas, no repetir frases
‚úÖ CHECKLIST ANTES DE RESPONDER
[ ] ¬øMi respuesta tiene m√°s de 3 l√≠neas? ‚Üí Dividir en varios mensajes
[ ] ¬øMencion√© "r√©plica" sin que preguntaran? ‚Üí Eliminar
[ ] ¬øMencion√© archivos .md u otra info interna? ‚Üí Eliminar
[ ] ¬øSuena natural o como robot? ‚Üí Ajustar
[ ] ¬øEs directo y al grano? ‚Üí Simplificar si necesario
OBJETIVO: El cliente debe sentir que est√° hablando con Lucas, un vendedor real de la tienda, por WhatsApp. Natural, directo, amigable. NUNCA debe sospechar que es un bot.`,
  model: "gpt-4.1-mini",
  tools: [
    searchProducts,
    getOrderDetails,
    getCustomerOrders,
    updateShippingAddress,
    getTrackingInfo,
    createReturnRequest,
    checkProductStock,
    updateCustomerInfo,
    checkVipStatus,
    fileSearch
  ],
  modelSettings: {
    temperature: 1,
    topP: 1,
    parallelToolCalls: true,
    maxTokens: 2048,
    store: true
  }
});

type WorkflowInput = { input_as_text: string };


// Main code entrypoint
export const runWorkflow = async (workflow: WorkflowInput) => {
  const conversationHistory: AgentInputItem[] = [
    {
      role: "user",
      content: [
        {
          type: "input_text",
          text: workflow.input_as_text
        }
      ]
    }
  ];
  const runner = new Runner({
    traceMetadata: {
      __trace_source__: "agent-builder",
      workflow_id: "wf_68ea7686147881909a7d51dc707420c901c614c3f9a1ca75"
    }
  });
  const guardrailsInputtext = workflow.input_as_text;
  const guardrailsResult = await runGuardrails(guardrailsInputtext, guardrailsConfig, context);
  const guardrailsHastripwire = guardrailsHasTripwire(guardrailsResult);
  const guardrailsAnonymizedtext = getGuardrailSafeText(guardrailsResult, guardrailsInputtext);
  const guardrailsOutput = (guardrailsHastripwire ? buildGuardrailFailOutput(guardrailsResult ?? []) : { safe_text: (guardrailsAnonymizedtext ?? guardrailsInputtext) });
  if (guardrailsHastripwire) {
    return guardrailsOutput;
  } else {
    const snkhouseAssistantResultTemp = await runner.run(
      snkhouseAssistant,
      [
        ...conversationHistory
      ]
    );
    conversationHistory.push(...snkhouseAssistantResultTemp.newItems.map((item) => item.rawItem));

    if (!snkhouseAssistantResultTemp.finalOutput) {
        throw new Error("Agent result is undefined");
    }

    const snkhouseAssistantResult = {
      output_text: snkhouseAssistantResultTemp.finalOutput ?? ""
    };
    return snkhouseAssistantResult;
  }
}
