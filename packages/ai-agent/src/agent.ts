import { ConversationMessage, AgentResponse, AgentContext } from "./types";
import { generateWithOpenAI } from "./openai-agent";
import { generateWithAnthropic } from "./anthropic-agent";
import { FALLBACK_RESPONSE } from "./prompts";

/**
 * Gera resposta com TRIPLE FALLBACK
 * 1. OpenAI (primeiro - TEM TOOLS!)
 * 2. Claude (se OpenAI falhar)
 * 3. Mock b√°sico (se ambos falharem)
 */
export async function generateResponseWithFallback(
  messages: ConversationMessage[],
  context: AgentContext = {},
): Promise<AgentResponse> {
  console.log("ü§ñ [Agent] Iniciando gera√ß√£o...");
  console.log(
    "üîÑ [Agent] Trying OpenAI first (with tools), Claude as fallback...",
  );

  let response: AgentResponse;

  // ===========================================
  // 1Ô∏è‚É£ TENTAR OPENAI PRIMEIRO (COM TOOLS!)
  // ===========================================
  try {
    console.log("[Agent] üöÄ Attempting OpenAI (with WooCommerce tools)...");

    response = await Promise.race([
      generateWithOpenAI(messages, {}, context),
      new Promise<AgentResponse>((_, reject) =>
        setTimeout(() => reject(new Error("OpenAI overall timeout")), 20000),
      ),
    ]);

    console.log("[Agent] ‚úÖ OpenAI succeeded!");
    return response;
  } catch (openaiError: any) {
    console.error("[Agent] ‚ùå OpenAI failed:", openaiError.message);

    // ===========================================
    // 2Ô∏è‚É£ FALLBACK PARA CLAUDE
    // ===========================================
    try {
      console.log("[Agent] üîÑ Trying Claude as fallback...");

      response = await Promise.race([
        generateWithAnthropic(messages, {
          model: "claude-3-5-haiku-20241022",
        }),
        new Promise<AgentResponse>((_, reject) =>
          setTimeout(() => reject(new Error("Claude overall timeout")), 12000),
        ),
      ]);

      console.log("[Agent] ‚úÖ Claude succeeded!");
      return response;
    } catch (claudeError: any) {
      console.error("[Agent] ‚ùå Claude also failed:", claudeError.message);

      // ===========================================
      // 3Ô∏è‚É£ √öLTIMO FALLBACK: MOCK B√ÅSICO
      // ===========================================
      console.log("[Agent] ‚ö†Ô∏è Both AIs failed, using emergency fallback");

      return {
        content:
          "¬°Hola! Soy el asistente de SNKHOUSE. Actualmente estoy experimentando problemas t√©cnicos, pero estoy aqu√≠ para ayudarte. ¬øEn qu√© puedo asistirte?",
        model: "emergency-fallback",
      };
    }
  }
}

/**
 * Gera resposta usando apenas OpenAI (com tools)
 */
export async function generateResponse(
  messages: ConversationMessage[],
  context: AgentContext = {},
): Promise<AgentResponse> {
  console.log("ü§ñ [Agent] Iniciando gera√ß√£o com OpenAI...");
  return await generateWithOpenAI(messages, {}, context);
}
